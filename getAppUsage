dotnet add package Microsoft.Extensions.Hosting.WindowsServices

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;

namespace ApplicationUsageTracker
{
    public class Program
    {
        public static void Main(string[] args)
        {
            CreateHostBuilder(args).Build().Run();
        }

        public static IHostBuilder CreateHostBuilder(string[] args) =>
            Host.CreateDefaultBuilder(args)
                .UseWindowsService()  // Runs as a Windows Service
                .ConfigureServices((hostContext, services) =>
                {
                    services.AddHostedService<Worker>();
                });
    }

    public class Worker : BackgroundService
    {
        [DllImport("user32.dll")]
        private static extern IntPtr GetForegroundWindow();

        [DllImport("user32.dll")]
        private static extern int GetWindowThreadProcessId(IntPtr hWnd, out int processId);

        private readonly Dictionary<string, (DateTime startTime, TimeSpan totalTime)> appUsage = new Dictionary<string, (DateTime, TimeSpan)>();
        private string lastApp = null;
        private DateTime lastAppStartTime = DateTime.Now;

        protected override async Task ExecuteAsync(CancellationToken stoppingToken)
        {
            while (!stoppingToken.IsCancellationRequested)
            {
                IntPtr hwnd = GetForegroundWindow();
                int processId;
                GetWindowThreadProcessId(hwnd, out processId);

                Process process = Process.GetProcessById(processId);
                string appName = process.ProcessName;

                if (appName != lastApp)
                {
                    if (!string.IsNullOrEmpty(lastApp))
                    {
                        TimeSpan timeSpent = DateTime.Now - lastAppStartTime;
                        if (appUsage.ContainsKey(lastApp))
                        {
                            appUsage[lastApp] = (appUsage[lastApp].startTime, appUsage[lastApp].totalTime + timeSpent);
                        }
                        else
                        {
                            appUsage[lastApp] = (lastAppStartTime, timeSpent);
                        }
                    }

                    lastApp = appName;
                    lastAppStartTime = DateTime.Now;
                }

                // Log data every 10 seconds (or adjust the interval as needed)
                if (DateTime.Now.Second % 10 == 0)
                {
                    LogApplicationUsage();
                }

                await Task.Delay(1000, stoppingToken);
            }
        }

        private void LogApplicationUsage()
        {
            Console.Clear();
            Console.WriteLine("Application Usage Report:");
            foreach (var app in appUsage)
            {
                Console.WriteLine($"{app.Key}: Started at {app.Value.startTime}, Total Active Time: {app.Value.totalTime}");
            }
        }
    }
}
